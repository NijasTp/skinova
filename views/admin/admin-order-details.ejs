<%- include('../partials/admin/header') %>

<style>
    :root {
      --primary-color: #3498db;
      --secondary-color: #2c3e50;
      --success-color: #2ecc71;
      --danger-color: #e74c3c;
      --info-color: #3498db;
      --light-gray: #ecf0f1;
    }
    .order-details-card {
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
    }
    .status-timeline {
        display: flex;
        justify-content: space-between;
        margin: 30px 0;
        position: relative;
    }
    .status-point {
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 1;
    }
    .status-dot {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-bottom: 10px;
    }
    .status-line {
        position: absolute;
        top: 10px;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #e0e0e0;
        z-index: 0;
    }
    .status-active {
        background-color: #28a745;
    }
    .status-inactive {
        background-color: #e0e0e0;
    }
    .customer-details {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
    }
</style>

<div class="container-fluid px-4">
    <h1 class="mt-4">Order Details</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item active">Order #<%= orders.orderId %></li>
    </ol>

    <div class="row">
        <div class="col-xl-8">
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order #<%= orders.orderId %></h5>
                        <span class="badge bg-<%= 
                            orders.status === 'delivered' ? 'success' :
                            orders.status === 'cancelled' ? 'danger' :
                            orders.status === 'shipped' ? 'info' :
                            'warning'
                        %>">
                            <%= orders.status.toUpperCase() %>
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Status Timeline -->
                    <div class="status-timeline">
                        <div class="status-line"></div>
                        <% const statuses = ['pending', 'confirmed', 'shipped', 'delivered']; %>
                        <% statuses.forEach(status => { %>
                            <div class="status-point">
                                <div class="status-dot <%= orders.status === status || statuses.indexOf(orders.status) > statuses.indexOf(status) ? 'status-active' : 'status-inactive' %>"></div>
                                <small><%= status.toUpperCase() %></small>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Product Details -->
                    <h5 class="mb-3">Product Information</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="/<%= orders.product.productImage[0] %>" 
                                                 alt="Product"
                                                 style="width: 50px; height: 50px; object-fit: cover;"
                                                 class="me-2">
                                            <span><%= orders.product.productName %></span>
                                        </div>
                                    </td>
                                    <td>₹<%= orders.price %></td>
                                    <td><%= orders.quantity %></td>
                                    <td>₹<%= orders.price * orders.quantity %></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <% if (orders.status !== 'cancelled' && orders.status !== 'delivered' && orders.status !== 'return request' && orders.status !== 'returned') { %>
                        <div class="mt-4">
                            <button onclick="updateStatus('<%= orders._id %>', '<%= orders.status %>')" class="btn btn-primary me-2">
                                Update Status
                            </button>                            
                            <button onclick="cancelOrder('<%= orders._id %>', '<%= orders.product._id %>')" class="btn btn-danger">
                                Cancel Order
                            </button>                            
                        </div>
                    <% } %>
                </div>
            </div>
        </div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    async function updateStatus(orderId , currentStatus) {
    const statuses = ['pending', 'confirmed', 'shipped', 'delivered'];
    
    const currentIndex = statuses.indexOf(currentStatus);
    
    const inputOptions = {};
    for (let i = currentIndex + 1; i < statuses.length; i++) {
        inputOptions[statuses[i]] = statuses[i].charAt(0).toUpperCase() + statuses[i].slice(1);
    }


    if (Object.keys(inputOptions).length === 0) {
        await Swal.fire({
            icon: 'info',
            title: 'No Further Updates',
            text: 'This order is already at the final status.'
        });
        return;
    }

    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: inputOptions,
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}


    async function cancelOrder(orderId, productId) {
    const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/admin/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, productId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        }
    }
}

</script>

<%- include('../partials/admin/footer') %>