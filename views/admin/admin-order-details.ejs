<html>
<head>
    <title>Admin Order Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --danger-color: #e74c3c;
            --info-color: #3498db;
            --light-gray: #ecf0f1;
        }
        .status-timeline {
            display: flex;
            justify-content: space-between;
            margin: 30px 0;
            position: relative;
        }
        .status-point {
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 1;
        }
        .status-dot {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-bottom: 10px;
        }
        .status-line {
            position: absolute;
            top: 10px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #e0e0e0;
            z-index: 0;
        }
        .status-active {
            background-color: #28a745;
        }
        .status-inactive {
            background-color: #e0e0e0;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <%- include('../partials/admin/header') %>

    <div class="container mx-auto my-8 p-4">
        <h1 class="text-3xl font-bold mb-4">Order Details</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item active">Order #<%= orders.orderId %></li>
        </ol>

        <div class="flex flex-col lg:flex-row">
            <div class="w-full lg:w-2/3 lg:pr-4">
                <div class="bg-white shadow-md rounded mb-4 p-4">
                    <div class="flex justify-between items-center mb-4">
                        <h5 class="text-xl font-semibold">Order #<%= orders.orderId %></h5>
                        <span class="px-2 py-1 rounded text-white
                            <%= orders.status === 'delivered' ? 'bg-green-500' :
                                orders.status === 'cancelled' ? 'bg-red-500' :
                                orders.status === 'shipped' ? 'bg-blue-500' :
                                'bg-yellow-500' %>">
                            <%= orders.status.toUpperCase() %>
                        </span>
                    </div>

                    <!-- Status Timeline -->
                    <div class="status-timeline">
                        <div class="status-line"></div>
                        <% const statuses = ['pending', 'confirmed', 'shipped', 'delivered']; %>
                        <% statuses.forEach(status => { %>
                            <div class="status-point">
                                <div class="status-dot <%= orders.status === status || statuses.indexOf(orders.status) > statuses.indexOf(status) ? 'status-active' : 'status-inactive' %>"></div>
                                <small><%= status.toUpperCase() %></small>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Product Details -->
                    <h5 class="text-lg font-semibold mb-3">Product Information</h5>
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead>
                                <tr>
                                    <th class="py-2 px-4 border-b border-gray-200">Product</th>
                                    <th class="py-2 px-4 border-b border-gray-200">Price</th>
                                    <th class="py-2 px-4 border-b border-gray-200">Quantity</th>
                                    <th class="py-2 px-4 border-b border-gray-200">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="py-2 px-4 border-b border-gray-200">
                                        <div class="flex items-center">
                                            <img src="/<%= orders.product.productImage[0] %>" 
                                                 alt="Product"
                                                 class="w-12 h-12 object-cover mr-2">
                                            <span><%= orders.product.productName %></span>
                                        </div>
                                    </td>
                                    <td class="py-2 px-4 border-b border-gray-200">₹<%= orders.price %></td>
                                    <td class="py-2 px-4 border-b border-gray-200"><%= orders.quantity %></td>
                                    <td class="py-2 px-4 border-b border-gray-200">₹<%= orders.price * orders.quantity %></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
<!-- User Details -->
<h5 class="text-lg font-semibold mt-6 mb-3">
    User Information
   </h5>
   <div class="bg-gray-100 p-4 rounded">
    <div class="flex items-center mb-2">
     <i class="fas fa-user mr-2 text-gray-700">
     </i>
     <span class="font-semibold">
      Name:
     </span>
     <span class="ml-2">
      <%= orders.userId.name %>
     </span>
    </div>
    <div class="flex items-center mb-2">
     <i class="fas fa-envelope mr-2 text-gray-700">
     </i>
     <span class="font-semibold">
      Email:
     </span>
     <span class="ml-2">
      <%= orders.userId.email %>
     </span>
    </div>
    <div class="flex items-center mb-2">
     <i class="fas fa-phone mr-2 text-gray-700">
     </i>
     <span class="font-semibold">
      Phone:
     </span>
     <span class="ml-2">
      <%= orders.userId.phone %>
     </span>
    </div>
    <div class="flex items-center">
     <i class="fas fa-map-marker-alt mr-2 text-gray-700">
     </i>
     <span class="font-semibold">
      Address:
     </span>
     <span class="ml-2">
     <b><%= orders.address.fullName %>-- </b>
      <%= orders.address.street %>, <%= orders.address.city %>,
      <%= orders.address.state %> - <%= orders.address.pincode %>
     </span>
    </div>
   </div>
   <% if (orders.status !== 'cancelled' && orders.status !== 'delivered' && orders.status !== 'return request' && orders.status !== 'returned' && orders.status !== 'return rejected') { %>
   <div class="mt-4 flex flex-col sm:flex-row">
    <button class="btn btn-primary bg-blue-500 text-white px-4 py-2 rounded mb-2 sm:mb-0 sm:mr-2" onclick="updateStatus('<%= orders._id %>', '<%= orders.status %>')">
     <i class="fas fa-sync-alt mr-2">
     </i>
     Update Status
    </button>
    <button class="btn btn-danger bg-red-500 text-white px-4 py-2 rounded" onclick="cancelOrder('<%= orders._id %>', '<%= orders.product._id %>')">
     <i class="fas fa-times mr-2">
     </i>
     Cancel Order
    </button>
   </div>
   <% } %>
   <% if (orders.status === 'return request') { %>
    <div class="mt-4 bg-white p-4 rounded shadow">
        <h5 class="text-lg font-semibold mb-3">Return Request Reason</h5>
        <p><%= orders.returnReason %></p>
        <div class="mt-4 flex">
            <button class="approve-return bg-green-500 text-white px-4 py-2 rounded mr-2" data-order-id="<%= orders._id %>">
                Approve Return
            </button>
            <button class="reject-return bg-red-500 text-white px-4 py-2 rounded">
                Reject Return
            </button>
        </div>
    </div>
<% } %>
  
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        async function updateStatus(orderId , currentStatus) {
            const statuses = ['pending', 'confirmed', 'shipped', 'delivered'];
            const currentIndex = statuses.indexOf(currentStatus);
            const inputOptions = {};
            for (let i = currentIndex + 1; i < statuses.length; i++) {
                inputOptions[statuses[i]] = statuses[i].charAt(0).toUpperCase() + statuses[i].slice(1);
            }

            if (Object.keys(inputOptions).length === 0) {
                await Swal.fire({
                    icon: 'info',
                    title: 'No Further Updates',
                    text: 'This order is already at the final status.'
                });
                return;
            }

            const { value: status } = await Swal.fire({
                title: 'Update Order Status',
                input: 'select',
                inputOptions: inputOptions,
                inputPlaceholder: 'Select status',
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to select a status!';
                    }
                }
            });

            if (status) {
                try {
                    const response = await fetch('/admin/orders/update-status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId, status }),
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Order status updated successfully',
                            timer: 1500
                        });
                        location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    await Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to update status'
                    });
                }
            }
        }


        async function cancelOrder(orderId, productId) {
    const { value: reason } = await Swal.fire({
        title: 'Cancel Order',
        text: 'Please provide a reason for canceling this order:',
        input: 'textarea',
        inputPlaceholder: 'Enter reason...',
        showCancelButton: true,
        confirmButtonText: 'Cancel Order',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
            if (!value) {
                return 'You need to provide a reason!';
            }
        }
    });

    if (reason) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/orders/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, productId, reason }), 
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order cancelled successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to cancel order'
                });
            }
        }
    }
}

        document.addEventListener("DOMContentLoaded", () => {
    // Existing event listeners for approve and reject return buttons
    document.querySelectorAll(".approve-return").forEach(button => {
        button.addEventListener("click", async (event) => {
            const orderId = '<%=orders._id%>'
            const response = await fetch("/admin/orders/approve-return", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId }),
            });
            const result = await response.json();
            if (result.success) {
                Swal.fire("Success", result.message, "success").then(() => {
                    location.reload();
                });
            } else {
                Swal.fire("Error", result.message, "error");
            }
        });
    });

    document.querySelectorAll(".reject-return").forEach(button => {
        button.addEventListener("click", async (event) => {
            const orderId = '<%=orders._id%>';
            const response = await fetch("/admin/orders/reject-return", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId }),
            });
            const result = await response.json();
            if (result.success) {
                Swal.fire("Success", result.message, "success").then(() => {
                    location.reload();
                });
            } else {
                Swal.fire("Error", result.message, "error");
            }
        });
    });
});
    </script>

    <%- include('../partials/admin/footer') %>
</body>
</html>
