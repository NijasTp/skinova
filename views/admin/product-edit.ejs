<html>
<head>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body class="bg-gray-100">
    <%- include("../../views/partials/admin/header") %>
    <section class="content-main p-6">
        <div class="content-header mb-6">
            <h2 class="text-2xl font-semibold">Edit Product</h2>
        </div>
        <div class="bg-white shadow-md rounded-lg p-6">
            <form id="editProductForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="mb-4">
                    <label for="product_name" class="block text-gray-700 font-medium mb-2">Product Name</label>
                    <input type="text" name="productName" value="<%= product.productName %>" class="w-full px-3 py-2 border rounded-lg" id="product_name" required>
                </div>
                
                <div class="mb-4">
                    <label class="block text-gray-700 font-medium mb-2">Description</label>
                    <textarea name="description" class="w-full px-3 py-2 border rounded-lg" rows="4" required><%= product.description %></textarea>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                        <label class="block text-gray-700 font-medium mb-2">Regular Price</label>
                        <input name="regularPrice" type="number" value="<%= product.regularPrice %>" class="w-full px-3 py-2 border rounded-lg" required>
                    </div>
                    <div>
                        <label class="block text-gray-700 font-medium mb-2">Sale Price</label>
                        <input name="salePrice" type="number" value="<%= product.salePrice %>" class="w-full px-3 py-2 border rounded-lg" required>
                    </div>
                    <div>
                        <label class="block text-gray-700 font-medium mb-2">Quantity</label>
                        <input name="quantity" type="number" value="<%= product.quantity %>" class="w-full px-3 py-2 border rounded-lg" required>
                    </div>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 font-medium mb-2">Category</label>
                    <select class="w-full px-3 py-2 border rounded-lg" name="category" required>
                        <% for(let i = 0; i < cat.length; i++) { %>
                            <option value="<%= cat[i]._id %>" <%= product.category.equals(cat[i]._id) ? 'selected' : '' %>>
                                <%= cat[i].name %>
                            </option>
                        <% } %>
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 font-medium mb-2">Product Images</label>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <% for(let i = 0; i < 4; i++) { %>
                            <div class="relative">
                                <div class="border rounded-lg overflow-hidden">
                                    <% if(product.productImage[i]) { %>
                                        <img src="/<%= product.productImage[i] %>" class="w-full h-40 object-cover" alt="Product Image">
                                        <div class="absolute top-2 right-2">
                                            <button type="button" class="bg-red-500 text-white rounded-full p-1" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>', <%= i %>)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    <% } else { %>
                                        <div class="p-4">
                                            <input type="file" name="image<%= i+1 %>" accept="image/*" class="w-full px-3 py-2 border rounded-lg" data-index="<%= i %>" onchange="previewImage(event, <%= i %>)">
                                            <div class="preview-container mt-2 hidden">
                                                <img id="preview<%= i %>" src="#" alt="Image preview" class="w-full h-auto">
                                            </div>
                                            <input type="hidden" name="croppedImage<%= i+1 %>" id="croppedImage<%= i+1 %>" value="">
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <div class="mb-4">
                    <button class="bg-blue-500 text-white px-4 py-2 rounded-lg" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let croppers = {};

        function previewImage(event, index) {
            const input = event.target;
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const previewContainer = input.parentElement.querySelector('.preview-container');
                    previewContainer.style.display = 'block';
                    
                    const preview = document.getElementById(`preview${index}`);
                    preview.src = e.target.result;
                    preview.style.display = 'block';

                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    croppers[index] = new Cropper(preview, {
                        aspectRatio: 1,
                        viewMode: 1,
                        ready: function() {
                            this.cropper.crop();
                        }
                    });
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        document.getElementById('editProductForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Form validation
            let isValid = true;

            // Get price and quantity values
            const quantity = parseInt(document.querySelector('input[name="quantity"]').value);
            const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
            const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);

            // Validate quantity
            if (quantity < 0) {
                isValid = false;
                Swal.fire({
                    title: 'Invalid Quantity!',
                    text: 'Quantity cannot be less than zero',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Validate regular price
            if (regularPrice <= 0) {
                isValid = false;
                Swal.fire({
                    title: 'Invalid Regular Price!',
                    text: 'Regular price must be greater than zero',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Validate sale price
            if (salePrice <= 0) {
                isValid = false;
                Swal.fire({
                    title: 'Invalid Sale Price!',
                    text: 'Sale price must be greater than zero',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            if (salePrice > regularPrice) {
                isValid = false;
                Swal.fire({
                    title: 'Invalid Price!',
                    text: 'Sale price cannot be higher than regular price',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            if (isValid) {
                // Process cropped images before submitting
                for (let i = 0; i < 4; i++) {
                    if (croppers[i]) {
                        const croppedDataUrl = croppers[i].getCroppedCanvas().toDataURL('image/jpeg');
                        document.getElementById(`croppedImage${i+1}`).value = croppedDataUrl;
                    }
                }

                const formData = new FormData(this);
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Product updated successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/admin/products';
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'An error occurred while updating the product',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An unexpected error occurred',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
            }
        });

        // Add real-time validation for quantity, regular price, and sale price
        document.querySelector('input[name="quantity"]').addEventListener('input', function() {
            const quantity = parseInt(this.value);
            if (quantity < 0) {
                this.setCustomValidity('Quantity cannot be less than zero');
                this.reportValidity();
            } else {
                this.setCustomValidity('');
            }
        });

        document.querySelector('input[name="regularPrice"]').addEventListener('input', function() {
            const regularPrice = parseFloat(this.value);
            const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);
            
            if (regularPrice <= 0) {
                this.setCustomValidity('Regular price must be greater than zero');
                this.reportValidity();
            } else {
                this.setCustomValidity('');
                
                // Check sale price relationship
                if (salePrice && salePrice > regularPrice) {
                    document.querySelector('input[name="salePrice"]').setCustomValidity('Sale price cannot be higher than regular price');
                    document.querySelector('input[name="salePrice"]').reportValidity();
                } else {
                    document.querySelector('input[name="salePrice"]').setCustomValidity('');
                }
            }
        });

        document.querySelector('input[name="salePrice"]').addEventListener('input', function() {
            const salePrice = parseFloat(this.value);
            const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
            
            if (salePrice <= 0) {
                this.setCustomValidity('Sale price must be greater than zero');
                this.reportValidity();
            } else if (regularPrice && salePrice > regularPrice) {
                this.setCustomValidity('Sale price cannot be higher than regular price');
                this.reportValidity();
            } else {
                this.setCustomValidity('');
            }
        });

        function deleteSingleImage(imageName, productId, index) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/deleteImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            imageNameToServer: imageName,
                            productIdToServer: productId,
                            imageIndex: index
                        }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status) {
                            Swal.fire(
                                'Deleted!',
                                'Your image has been deleted.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to delete image',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while deleting the image',
                            'error'
                        );
                    });
                }
            });
        }
    </script>
    <%- include("../../views/partials/admin/footer") %>
</body>
</html>