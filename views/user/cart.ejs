<html>
 <head>
  <title>
   My Cart
  </title>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet"/>
  <style>
       .hero {
  display: flex;
  justify-content: space-between;
  background-color: #e6f4f4;
  align-items: center;
  padding: 4rem 2rem;
  width: 100%;
  margin: 0 auto;
  min-height: 50vh;
}

.hero-content {
  max-width: 500px;
  margin-left: 40%;
}

.hero-title {
  font-size: 2rem;
  line-height: 1.2;
  color: #2c3e50;
  margin-bottom: 1rem;
}

.hero-description {
  color: #5d6d7e;
  margin-bottom: 2rem;
  line-height: 1.6;
}

.cta-button {
  display: inline-block;
  padding: 0.8rem 2rem;
  background-color: #1a4741;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.cta-button:hover {
  background-color: #123530;
}

.hero-image {
  width: 300px;
  position: relative;
  right: 100px;

}
@media (max-width: 768px) {
  .hero {
      flex-direction: column;
      text-align: center;
      padding: 2rem;
  }
  .hero-image {
  width: 300px;
  position: relative;
  left: 30px;

}

}
/* Style for sorting dropdown */
.form-control {
  padding: 0.5rem 1rem;
  border: 1px solid #ccc;
  border-radius: 0.375rem;
  background-color: white;
  transition: all 0.3s ease;
}

.form-control:focus {
  outline: none;
  border-color: #1a4741;
  box-shadow: 0 0 5px rgba(26, 71, 65, 0.5);
}

/* Style for Apply button */
.btn-primary {
  background-color: #1a4741;
  color: white;
  padding: 0.5rem 1.5rem;
  border-radius: 0.375rem;
  transition: background-color 0.3s ease;
  font-weight: bold;
}

.btn-primary:hover {
  background-color: #123530;
}

/* Style for Clear All button */
.btn-danger {
  background-color: #d9534f;
  color: white;
  padding: 0.5rem 1.5rem;
  border-radius: 0.375rem;
  transition: background-color 0.3s ease;
  font-weight: bold;
}

.btn-danger:hover {
  background-color: #c9302c;
}

/* Responsive styles */
@media (max-width: 768px) {
  .form-inline {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
}

  </style>
 </head>
 <body class="bg-gray-100" style="font-family: 'Roboto', sans-serif;">
  <%- include('../partials/user/header') %> 
  <main class="hero w-full">
    <div class="hero-content">
       <b><h1 class="hero-title">MY CART</h1></b>
        <p class="hero-description">
          <i> <a href="/">Home</a> <span> > </span> <a href="/cart">cart</a></i>
        </p>
    </div>
    <img src="/img/skinova cover.png" alt="Skinova Cover" class="hero-image">
</main>
  <div class="container mx-auto mt-8">
   <div class="overflow-x-auto">
    <table class="min-w-full bg-white">
     <thead>
      <tr class="w-full bg-teal-400 text-white">
       <th class="py-2 px-4">
        Product
       </th>
       <th class="py-2 px-4">
        Price
       </th>
       <th class="py-2 px-4">
        Quantity
       </th>
       <th class="py-2 px-4">
        Total
       </th>
      </tr>
     </thead>
     <tbody>
      <% if (cart && cart.items.length > 0) { %>
        <% cart.items.forEach(item => { %>
          <tr class="border-b">
            <td class="py-4 px-4 flex items-center">
              <a href="/deleteFromCart?id=<%= item.productId._id %>" class="text-red-500 hover:text-red-600 mr-2">
                <i class="fas fa-times"></i>
              </a>
              <img src="<%= item.productId.productImage[0] %>" class="w-16 h-16 mr-4" alt="Product Image">
              <div>
                <h2 class="font-bold"><%= item.productId.productName %></h2>
                <p><%= item.productId.description %></p>
              </div>
            </td>
            <td class="py-4 px-4">₹<%= item.productId.salePrice %></td>
            <td class="text-center" data-title="Stock">
              <button class="quantity-btn" onclick="updateQuantity('<%= item.productId._id %>', -1)"> − </button>
              <span id="quantity-<%= item.productId._id %>" class="py-4 px-4"><%= item.quantity %></span>
              <button class="quantity-btn" onclick="updateQuantity('<%= item.productId._id %>', 1)"> + </button>
            </td>
            <td class="py-4 px-4">
              ₹<span id="totalPrice-<%= item.productId._id %>"><%= item.totalPrice %></span>
            </td>
            <!-- Pass the stock value as a hidden element -->
            <span id="stock-<%= item.productId._id %>" data-stock="<%= item.productId.quantity %>" style="display:none;"></span>
        <% }) %>
      <% } else { %>
        <tr>
          <td colspan="4" class="text-center py-4">Your cart is empty</td>
        </tr>
      <% } %>
    </tbody>
    
    </table>
   </div>
   <div class="flex flex-col md:flex-row justify-between mt-8">
    <div class="bg-white p-6 shadow-md w-full md:w-1/3">
     <h2 class="font-bold text-lg mb-4">
      CART TOTALS
     </h2>
     <div class="flex justify-between font-bold text-lg">
      <span>
          TOTAL
      </span>
      <span>
          ₹<%= cart ? cart.cartTotal : 0 %> 
      </span>
  </div>
    </div>
    <div class="flex flex-col md:flex-row items-center mt-8 md:mt-0">
     <input class="border p-2 rounded-l-full w-full md:w-auto" placeholder="Coupon Code" type="text"/>
     <button class="bg-teal-700 text-white px-4 py-2 rounded-r-full w-full md:w-auto mt-2 md:mt-0">
      Apply Coupon
     </button>
     <button class="bg-teal-400 text-white px-4 py-2 rounded-full w-full md:w-auto mt-2 md:mt-0 md:ml-4">
      Coupons
     </button>
    </div>
   </div>
   <div class="flex justify-center mt-8">
    <a href="/checkout" class="bg-teal-400 text-white px-6 py-3 rounded-full">
     Proceed to Checkout
    </a>
   </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 async function updateQuantity(productId, change) {
    try {
        // Get current quantity from the page
        const quantityElement = document.getElementById(`quantity-${productId}`);
        const currentQuantity = parseInt(quantityElement.innerText);

        // New quantity after the change
        const newQuantity = currentQuantity + change;

        // Get the stock value from the data attribute
        const stock = parseInt(document.getElementById(`stock-${productId}`).getAttribute('data-stock'));

        // Check if new quantity exceeds 5
        if (newQuantity > 5) {
            Swal.fire({
                icon: "warning",
                title: "Limit reached",
                text: "You can only add up to 5 of this product.",
                confirmButtonColor: "#3085d6",
            });
            return; // Exit early if the limit is exceeded
        }

        // Check if new quantity exceeds the stock
        if (newQuantity > stock) {
            Swal.fire({
                icon: "warning",
                title: "Not enough stock",
                text: `Only ${stock} items available in stock.`,
                confirmButtonColor: "#3085d6",
            });
            return; // Exit early if the stock is insufficient
        }

        // Send request to update the quantity
        const response = await fetch(`/update-quantity?id=${productId}&change=${change}`, {
            method: "POST",
        });

        const data = await response.json();

        if (data.success) {
            // Update quantity on the page
            quantityElement.innerText = data.newQuantity;

            // Calculate the new total price based on the updated quantity
            const salePrice = parseFloat(data.salePrice); // Assuming you send the sale price back in the response
            const newTotalPrice = (salePrice * data.newQuantity).toFixed(2); // Calculate total price

            // Update total price on the page
            document.getElementById(`totalPrice-${productId}`).innerText = newTotalPrice; // Update total price if necessary
            window.location.reload('/cart')
        } else {
            // Show any other error message
            Swal.fire({
                icon: "warning",
                title: "Oops!",
                text: data.message,
                confirmButtonColor: "#3085d6",
            });
        }
    } catch (error) {
        console.error("Error updating quantity:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong! Please try again.",
            confirmButtonColor: "#d33",
        });
    }
}
</script>
  
 </body>
</html>
