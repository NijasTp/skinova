<!DOCTYPE html>
<html>

<head>
  <title>Checkout Page</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
  <link rel="icon" href="/img/favicon.jpg" type="image/x-icon">

  <style>
    body {
      font-family: 'Roboto', sans-serif;
    }
    .hero {
      display: flex;
      justify-content: space-between;
      background-color: #e6f4f4;
      align-items: center;
      padding: 4rem 2rem;
      width: 100%;
      margin: 0 auto;
      min-height: 50vh;
    }

    .hero-content {
      max-width: 500px;
      margin-left: 40%;
    }

    .hero-title {
      font-size: 2rem;
      line-height: 1.2;
      color: #2c3e50;
      margin-top: 40px;;
    }

    .hero-description {
      color: #5d6d7e;
      margin-bottom: 2rem;
      line-height: 1.6;
    }

    .cta-button {
      display: inline-block;
      padding: 0.8rem 2rem;
      background-color: #1a4741;
      color: white;
      text-decoration: none;
      border-radius: 4px;
      transition: background-color 0.3s ease;
    }

    .cta-button:hover {
      background-color: #123530;
    }

    .hero-image {
      width: 300px;
      position: relative;
      right: 100px;
    }

    @media (max-width: 768px) {
      .hero {
        flex-direction: column;
        text-align: center;
        padding: 2rem;
      }

      .hero-content {
        margin-left: 0;
      }

      .hero-image {
        width: 300px;
        position: relative;
        left: 0;
      }
    }
  </style>
</head>

<body class="bg-gray-100">
  <%- include('../partials/user/header') %> 
  <main class="hero w-full">
    <div class="hero-content">
     <b>
      <h1 class="hero-title">
       CHECKOUT
      </h1>
     </b>
     <p class="hero-description">
      <i>
       <a href="/">
        Home
       </a>
       <span>
        &gt;
       </span>
       <a href="/cart">
        Cart
       </a>
       <span>
        &gt;
       </span>
       <a href="/checkout">
        Checkout
       </a>
      </i>
     </p>
    </div>
    <img alt="Illustration of a shopping cart with various items" class="hero-image" height="300" src="/img/skinova cover.png" width="300"/>
   </main>
  <div class="container mx-auto p-4">
    

    <!-- Cart Items -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-2xl font-semibold mb-4 text-gray-700">Cart Items</h2>
      <%if (cartItems.length === 0) { %>
      <h6 class="text-gray-600">Your cart is empty.</h6>
      <% }else { %>
      <% cartItems.forEach(item=> { %>
        <div class="flex justify-between items-center mb-4 border-b pb-4">
          <div class="flex items-center">
            <img src="<%= item.productId.productImage[0] %>" alt="Image of <%= item.productId.name %>"
              class="w-16 h-16 rounded mr-4" />
            <div>
              <h3 class="text-lg font-semibold text-gray-800">
                <%= item.productId.productName %>
              </h3>
              <p class="text-gray-600">Quantity: <%= item.quantity %>
              </p>
            </div>
          </div>
          <p class="text-lg font-semibold text-gray-800">$<%= item.totalPrice.toFixed(2) %>
          </p>
        </div>
        <% }); %>

          <!-- Total Section -->
          <div class="bg-gray-100 p-4 rounded-lg shadow-md mt-4">
            <p class="text-lg font-semibold text-gray-800">Subtotal: ₹<%= cart.cartTotal.toFixed(2) %>
            </p>
            <p class="text-lg font-semibold text-gray-800 text-green-500">Discount: -₹<%= cart.discount.toFixed(2) %>
            </p>
            <p class="text-lg font-semibold text-gray-800">Total Payable: ₹<%= (cart.cartTotal -
                cart.discount).toFixed(2) %>
            </p>

          </div>
          <% }%>
    </div>

    <!-- Coupon Section -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-2xl font-semibold mb-4 text-gray-700">Apply Coupon</h2>
      <form id="couponForm" action="/apply-coupon" method="POST" class="flex mb-4">
        <input type="text" id="couponCode" name="couponCode" class="border p-2 rounded-l-lg w-full"
          placeholder="Enter coupon code" />
        <input type="hidden" value="<%=user._id%>" name="userId">
        <button type="submit" class="bg-blue-500 text-white p-2 rounded-r-lg hover:bg-blue-600">Apply</button>
      </form>
      <p id="couponMessage"></p>
      <a id="clearCouponBtn" class="bg-red-500 text-white p-3 rounded-lg hover:bg-red-600">
        Clear Coupons
    </a>
    
      <a class="bg-green-500 text-white ms-3 p-3 rounded-lg hover:bg-green-600" id="show-coupons">See All
        Coupons</a>
    </div>


    <!-- Coupons Modal -->
    <div id="coupons-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
      <div class="flex items-center justify-center h-screen">
        <div class="bg-white p-6 rounded-lg shadow-md w-96">
          <h2 class="text-2xl font-semibold mb-4 text-gray-700">Available Coupons</h2>
          <ul class="space-y-2">
            <% coupons.forEach(coupon=> { %>
              <% let isUsed=usedCoupons.includes(coupon.code); %>
                <li class="flex justify-between items-center p-2 border rounded-lg 
                      <%= isUsed ? 'bg-gray-300 text-gray-600 line-through' : 'bg-green-100 text-green-700' %>">
                  <span>
                    <%= coupon.code %> - ₹<%= coupon.offerPrice %> OFF
                  </span>
                  <% if (isUsed) { %>
                    <span class="text-sm font-semibold text-gray-500">USED</span>
                    <% } %>
                </li>
                <% }) %>
          </ul>
          <button class="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 mt-4 w-full" id="close-coupons">
            Close
          </button>
        </div>
      </div>
    </div>


    <!-- Address Section -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-2xl font-semibold mb-4 text-gray-700">Select Address</h2>
      <select class="border p-2 rounded-lg w-full mb-4">
        <% addresses.forEach(addr=> { %>
          <option value="<%= addr._id %>">
            <%= addr.name %>, <%= addr.streetAddress %>, <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
          </option>
          <% }) %>
      </select>

      <button class="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600">Add New Address</button>
    </div>

    <!-- Payment Methods -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-2xl font-semibold mb-4 text-gray-700">Payment Methods</h2>
      <div class="flex items-center mb-2">
        <input type="radio" id="cod" name="payment" value="cod" class="mr-2" />
        <label class="text-lg text-gray-800" for="cod">Cash on Delivery</label>
      </div>
      <div class="flex items-center mb-2">
        <input type="radio" id="razorpay" name="payment" value="razorpay" class="mr-2" />
        <label class="text-lg text-gray-800" for="razorpay">Razorpay</label>
      </div>
      <div class="flex items-center mb-2">
        <input type="radio" id="wallet" name="payment" value="wallet" class="mr-2" />
        <label class="text-lg text-gray-800" for="wallet">Wallet</label>
      </div>
    </div>

    <!-- Buy Now Button -->
    <div class="text-center">
      <button class="bg-blue-500 text-white p-4 rounded-lg text-xl font-semibold hover:bg-blue-600">Buy Now</button>
    </div>
  </div>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>


    const showCoupons = document.getElementById('show-coupons');
    const closeCoupons = document.getElementById('close-coupons');
    const couponsModal = document.getElementById('coupons-modal');

    showCoupons.addEventListener('click', () => {
      couponsModal.classList.remove('hidden');
    });

    closeCoupons.addEventListener('click', () => {
      couponsModal.classList.add('hidden');
    });





    document.getElementById("couponForm").addEventListener("submit", async function (event) {
      event.preventDefault();
      const couponCode = document.getElementById("couponCode").value;
      const userId = "<%= user._id %>"; // Make sure user ID is correctly included

      try {
        const response = await fetch("/apply-coupon", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ couponCode, userId }) // Include userId
        });

        if (!response.ok) {
          throw new Error("Server error: " + response.status);
        }

        const result = await response.json();

        if (result.success) {
          Swal.fire({
            icon: "success",
            title: "Coupon Applied",
            text: `Discount Applied: ₹${result.discount}`,
          }).then(() => {
            window.location.reload(); // Reload to update totals
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Oops!",
            text: result.message,
          });
        }
      } catch (error) {
        console.error("Error applying coupon:", error);
        Swal.fire({
          icon: "error",
          title: "Something went wrong!",
          text: "Please try again later.",
        });
      }
    });

    document.addEventListener("DOMContentLoaded", function () {
    const clearCouponBtn = document.getElementById("clearCouponBtn");

    if (clearCouponBtn) {
        clearCouponBtn.addEventListener("click", async function (event) {
            event.preventDefault();

            Swal.fire({
                title: "Are you sure?",
                text: "This will remove the applied coupon from your cart.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, remove it!"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch("/clear-coupons", { method: "GET" });
                        const data = await response.json();

                        if (data.success) {
                            Swal.fire({
                                title: "Removed!",
                                text: "The coupon has been removed successfully.",
                                icon: "success",
                                confirmButtonColor: "#3085d6",
                                confirmButtonText: "OK"
                            }).then(() => {
                                window.location.reload(); // Reload to update cart
                            });
                        } else {
                            Swal.fire("Error", data.message, "error");
                        }
                    } catch (error) {
                        Swal.fire("Error", "Something went wrong!", "error");
                        console.error("Error clearing coupon:", error);
                    }
                }
            });
        });
    }
});

document.addEventListener("DOMContentLoaded", function () {
    const buyNowBtn = document.querySelector(".bg-blue-500.text-white.p-4");
    
    if (buyNowBtn) {
        buyNowBtn.addEventListener("click", async function () {
            const selectedAddress = document.querySelector("select").value;
            const selectedPayment = document.querySelector("input[name='payment']:checked");

            if (!selectedAddress) {
                return Swal.fire("Error", "Please select an address!", "error");
            }
            if (!selectedPayment) {
                return Swal.fire("Error", "Please select a payment method!", "error");
            }

            const paymentMethod = selectedPayment.value;
            const orderData = { addressId: selectedAddress, paymentMethod };

            if (paymentMethod === "cod") {
                try {
                    const response = await fetch("/place-order", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(orderData)
                    });

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire("Success", "Order placed successfully!", "success")
                            .then(() => window.location.href = "/orders");
                    } else {
                        Swal.fire("Error", result.message, "error");
                    }
                } catch (error) {
                    console.error("Error placing order:", error);
                    Swal.fire("Error", "Something went wrong!", "error");
                }
            } 
            else if (paymentMethod === "razorpay") {
    try {
        const response = await fetch("/create-razorpay-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(orderData)
        });

        const order = await response.json();

        if (!order.success) {
            return Swal.fire("Error", "Failed to create Razorpay order", "error");
        }

        const options = {
            key: order.key, // Use Razorpay Key ID
            amount: order.amount,
            currency: "INR",
            name: "Skinova",
            description: "Order Payment",
            order_id: order.orderId, // Required order ID from backend
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch("/verify-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            orderId: response.razorpay_order_id,
                            paymentId: response.razorpay_payment_id,
                            signature: response.razorpay_signature,
                            addressId: selectedAddress // Ensure this is sent
                        })
                    });

                    const verifyResult = await verifyResponse.json();

                    if (verifyResult.success) {
                        Swal.fire("Success", "Payment Successful! Order Placed.", "success")
                            .then(() => window.location.href = "/orders");
                    } else {
                        Swal.fire("Error", verifyResult.message, "error");
                    }
                } catch (error) {
                    Swal.fire("Error", "Payment verification failed!", "error");
                }
            }
        };

        const razorpay = new Razorpay(options);
        razorpay.open();
    } catch (error) {
        Swal.fire("Error", "Something went wrong!", "error");
    }
}

            else if (paymentMethod === "wallet") {
          
                try {
                    const response = await fetch("/wallet-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(orderData)
                    });

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire("Success", "Order placed using Wallet!", "success")
                            .then(() => window.location.href = "/orders");
                    } else {
                        Swal.fire("Error", result.message, "error");
                    }
                } catch (error) {
                    Swal.fire("Error", "Something went wrong!", "error");
                }
            }
        });
    }
});


  </script>
</body>

</html>