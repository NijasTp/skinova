<!DOCTYPE html>
<html lang="en">

<head>
    <title>Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }

        .product-image {
            max-width: 100%; /* Make image responsive */
            height: auto; /* Maintain aspect ratio */
        }

        .hero {
            display: flex;
            justify-content: space-between;
            background-color: #e6f4f4;
            align-items: center;
            padding: 4rem 2rem;
            width: 100%;
            margin: 0 auto;
            min-height: 50vh;
            flex-wrap: wrap; /* Allow wrapping on smaller screens */
        }

        .hero-content {
            max-width: 500px;
            margin-left: 10%; /* Adjust margin for better centering */
        }

        .hero-title {
            font-size: 2rem;
            line-height: 1.2;
            color: #2c3e50;
            margin-top: 40px;
        }

        .hero-description {
            color: #5d6d7e;
            margin-bottom: 2rem;
            line-height: 1.6;
        }

        .cta-button {
            display: inline-block;
            padding: 0.8rem 2rem;
            background-color: #1a4741;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .cta-button:hover {
            background-color: #123530;
        }

        .hero-image {
            width: 300px;
            position: relative;
            right: 10%; /* Adjust for better centering */
            max-width: 100%; /* Make image responsive */
            height: auto; /* Maintain aspect ratio */
        }

        @media (max-width: 768px) {
            .hero {
                flex-direction: column;
                text-align: center;
                padding: 2rem;
            }

            .hero-image {
                width: 80%; /* Adjust image size for smaller screens */
                position: static; /* Reset position */
                margin: 0 auto; /* Center the image */
            }

            .hero-content {
                margin-left: 0; /* Reset margin */
                text-align: center; /* Center text */
            }
        }

        /* Style for sorting dropdown */
        .form-control {
            padding: 0.5rem 1rem;
            border: 1px solid #ccc;
            border-radius: 0.375rem;
            background-color: white;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #1a4741;
            box-shadow: 0 0 5px rgba(26, 71, 65, 0.5);
        }

        /* Style for Apply button */
        .btn-primary {
            background-color: #1a4741;
            color: white;
            padding: 0.5rem 1.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.3s ease;
            font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #123530;
        }

        /* Style for Clear All button */
        .btn-danger {
            background-color: #d9534f;
            color: white;
            padding: 0.5rem 1.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.3s ease;
            font-weight: bold;
        }

        .btn-danger:hover {
            background-color: #c9302c;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .form-inline {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }

            .grid-cols-1 {
                grid-template-columns: 1fr; /* Stack columns on small screens */
            }
        }
    </style>
</head>

<body class="bg-gray-100">
    <%- include('../partials/user/header') %>
    <main class="hero w-full">
        <div class="hero-content">
            <b>
                <h1 class="hero-title">ORDER DETAILS</h1>
            </b>
            <p class="hero-description">
                <i> <a href="/">Home</a> <span> > </span> <a href="/orders">Orders</a><span> > </span> <a href="#">Order Details</a></i>
            </p>
        </div>
        <img src="/img/skinova cover.png" alt="Skinova Cover" class="hero-image">
    </main>
    <div class="container mx-auto p-4">
        <div class="bg-white shadow-md rounded-lg p-6">
            <div class="flex justify-between items-center mb-6">
                <% if (order.status.toLowerCase() === 'delivered'||order.status.toLowerCase() === 'return request') { %>
                <a title="Download Invoice" href="/download-invoice/<%= order._id %>" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600">
                    <i class="fas fa-download"></i>
                </a>
                <% } %>
                <a href="/orders" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">
                    <i class="fas fa-arrow-left"></i> Back to Orders
                </a>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <img class="product-image" src="/<%= order.product.productImage[0] %>" alt="Product Image" />
                </div>
                <div>
                    <h2 class="text-xl font-semibold mb-2"><%= order.product.productName %></h2>
                    <p class="text-gray-700 mb-4"><%= order.product.description %></p>
                    <div class="mb-4">
                        <span class="text-gray-600">Price:</span>
                        <span class="text-lg font-bold">₹<%= order.price.toFixed(2) %></span>
                    </div>
                    <div class="mb-4">
                        <span class="text-gray-600">Quantity:</span>
                        <span class="text-lg font-bold"><%= order.quantity %></span>
                    </div>
                    <% if (order.discount > 0) { %>
                    <div class="mb-4 text-green-500">
                        <span class="text-gray-600">Discount:</span>
                        <span class="text-lg font-bold"><%= order.discount %>%OFF</span>
                    </div>
                    <% } %>
                    <% if (order.couponDiscount > 0) { %>
                    <div class="mb-4 text-green-500">
                        <span class="text-gray-600">Coupon Discount:</span>
                        <span class="text-lg font-bold">-₹<%= order.couponDiscount.toFixed(2) %></span>
                    </div>
                    <% } %>

                    <div class="mb-4">
                        <span class="text-gray-600">Final Total:</span>
                        <span class="text-lg font-bold">₹<%= (order.price * order.quantity - order.couponDiscount).toFixed(2) %></span>
                    </div>

                    <div class="mb-4">
                        <span class="text-gray-600">Order Date:</span>
                        <span class="text-lg font-bold"><%= new Date(order.createdOn).toLocaleDateString() %></span>
                    </div>
                    <div class="mb-4">
                        <span class="text-gray-600">Status:</span>
                        <span class="text-lg font-bold <%= order.status.toLowerCase() %>"><%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %></span>
                    </div>

                    <% if (order.status.toLowerCase() === 'delivered' && !order.returnRequested && returnEligible) { %>
                    <p class="text-green-500"><%= daysLeft %> days left to return this product.</p>
                    <button onclick="requestReturn('<%= order._id %>')" class="bg-red-500 text-white px-4 py-2 rounded">
                        Return Order
                    </button>
                    <% } else if (!returnEligible && order.status.toLowerCase() === 'delivered') { %>
                    <p class="text-red-500">Return period expired.</p>
                    <% } else if (order.returnRequested && order.status.toLowerCase() !== 'return rejected' && order.status.toLowerCase() !== 'returned') { %>
                    <p class="text-purple-500 font-bold">Return Requested: <%= order.returnReason %></p>
                    <% } else if (order.status.toLowerCase() === 'returned') { %>
                    <p class="text-green-500 font-bold">Product returned successfully.</p>
                    <% } %>

                    <% if (['pending', 'confirmed', 'shipped'].includes(order.status.toLowerCase())) { %>
                    <button onclick="cancelOrder('<%= order._id %>')" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">
                        Cancel Order
                    </button>
                    <% } %>

                    <% if (order.status.toLowerCase() === 'return rejected') { %>
                    <div class="mt-4 bg-red-100 border border-red-500 text-red-500 px-4 py-3 rounded-b relative" role="alert">
                        <strong class="font-bold">Return Request Rejected!</strong>
                        <span class="block sm:inline">Your return request has been rejected by the admin.</span>
                    </div>
                    <% } %>

                </div>
            </div>

            <div class="mt-6">
                <h2 class="text-xl font-semibold mb-4">Customer Information</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="mb-4">
                            <span class="text-gray-600">Name:</span>
                            <span class="text-lg font-bold"><%= order.userId.name %></span>
                        </div>
                        <div class="mb-4">
                            <span class="text-gray-600">Email:</span>
                            <span class="text-lg font-bold"><%= order.userId.email %></span>
                        </div>
                    </div>
                    <div>
                        <div class="mb-4">
                            <span class="text-gray-600">Shipping Address:</span>
                            
                            <span class="text-lg font-bold">
                                <%=order.address.fullName%><br>
                                <%= order.address.street %>, <%= order.address.city %>,
                                <%= order.address.state %> - <%= order.address.pincode %>
                                
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <%- include('../partials/user/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function cancelOrder(orderId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You are about to cancel this order. This action cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, cancel it"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Enter Cancellation Reason",
                        input: "text",
                        inputPlaceholder: "Enter reason here...",
                        showCancelButton: true,
                        confirmButtonText: "Submit",
                        preConfirm: (reason) => {
                            if (!reason.trim()) {
                                Swal.showValidationMessage("Cancellation reason is required");
                            }
                            return reason;
                        }
                    }).then((reasonResult) => {
                        if (reasonResult.isConfirmed) {
                            fetch(`/cancel-order/${orderId}`, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ reason: reasonResult.value })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Cancelled!", "Your order has been cancelled.", "success")
                                    .then(() => location.reload());
                                } else {
                                    Swal.fire("Error", data.error || "Something went wrong!", "error");
                                }
                            })
                            .catch(() => {
                                Swal.fire("Error", "Failed to cancel order", "error");
                            });
                        }
                    });
                }
            });
        }

        function requestReturn(orderId) {
            Swal.fire({
                title: "Return Request",
                input: "text",
                inputLabel: "Reason for return",
                inputPlaceholder: "Enter your reason...",
                showCancelButton: true,
                confirmButtonText: "Submit",
                preConfirm: (returnReason) => {
                    if (!returnReason) {
                        Swal.showValidationMessage("Reason is required");
                    }
                    return returnReason;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch("/request-return", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId, returnReason: result.value })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire("Success", "Return request submitted!", "success")
                                .then(() => location.reload());
                        } else {
                            Swal.fire("Error", data.message, "error");
                        }
                    })
                    .catch(() => Swal.fire("Error", "Something went wrong!", "error"));
                }
            });
        }
    </script>
</body>
</html>